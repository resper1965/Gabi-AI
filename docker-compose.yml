version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: gabi_ai_postgres
    environment:
      POSTGRES_DB: gabi_ai_db
      POSTGRES_USER: gabi_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - gabi_ai_network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: gabi_ai_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - gabi_ai_network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gabi_ai_backend
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - POSTGRES_CONNECTION_STRING=${POSTGRES_CONNECTION_STRING}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_INITIAL_PASSWORD=${ADMIN_INITIAL_PASSWORD}
      - APP_ENVIRONMENT=${APP_ENVIRONMENT}
      - APP_DEBUG=${APP_DEBUG}
      - LOG_LEVEL=${LOG_LEVEL}
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - gabi_ai_network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: gabi_ai_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_APP_NAME=Gabi AI
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - gabi_ai_network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: gabi_ai_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - gabi_ai_network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  gabi_ai_network:
    driver: bridge
